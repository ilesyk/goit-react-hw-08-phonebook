{"version":3,"file":"static/js/385.b82b8e2c.chunk.js","mappings":"+PAGaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sFAMvBC,GAASJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAoBM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sE,UCP7BI,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAU,EACpDC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAM,EAC5CC,EAAiB,SAAAL,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAGlDK,GAAwBC,EAAAA,EAAAA,IACnC,CAACF,EAHyB,SAAAL,GAAK,OAAIA,EAAMQ,MAAO,IAIhD,SAACP,EAAUO,GACT,OAAOP,EAASO,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,6BCLIE,EAAaC,EAAAA,KAAaC,MAAM,CACpCL,KAAMI,EAAAA,KACHE,QACC,yHACA,wIAEDC,SAAS,YACZC,OAAQJ,EAAAA,KACLE,QACC,+EACA,gGAEDC,SAAS,cAGDE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYjB,GAW7B,OACEkB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,GAAI,CAACC,aAAc,QAASC,QAAQ,KAAIL,SAAC,iBACrDC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CACLC,cAAe,CACbtB,KAAM,GACNQ,OAAQ,IAEVe,iBAAkBpB,EAClBqB,SAAU,SAACC,EAAQC,IAnBzB,SAAuBD,GAEnBlC,EAASoC,MACP,SAAA5B,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBwB,EAAOzB,KAAKC,aAAa,IAG9D2B,MAAM,GAADC,OAAIJ,EAAOzB,KAAI,6BAEtBU,GAASoB,EAAAA,EAAAA,IAAWL,GAC7B,CAWQM,CAAcN,GACdC,EAAQM,WACV,EAAEjB,UAEFF,EAAAA,EAAAA,MAAChC,EAAQ,CAAAkC,SAAA,EACPC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,GAAG,iBACHC,MAAM,OACNf,QAAQ,WACRgB,KAAK,QACLC,KAAK,OACLrC,KAAK,OAAMe,UAEXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACJJ,GAAG,OACHlC,KAAK,OACLqC,KAAK,OACLE,YAAY,wBAGhBvB,EAAAA,EAAAA,KAAC9B,EAAM,CAACc,KAAK,OAAOwC,UAAU,SAC9BxB,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,GAAG,iBACHC,MAAM,SACNf,QAAQ,WACRgB,KAAK,QACLC,KAAK,OACLrC,KAAK,OAAMe,UAEXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACJJ,GAAG,SACHlC,KAAK,SACLqC,KAAK,OACLE,YAAY,0BAGhBvB,EAAAA,EAAAA,KAAC9B,EAAM,CAACc,KAAK,SAASwC,UAAU,SAChCxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAACL,KAAK,SAAShB,QAAQ,YAAYiB,KAAK,SAAQtB,SAAC,uBAOlE,E,wCCrFa2B,EAAe,WAC1B,IAAMhC,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYjB,GACvBgD,GAAmB/B,EAAAA,EAAAA,IAAYhB,GAErC,OAAKL,EAASqD,QAAWrD,GAIvByB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC3B,GAAI,CAAE4B,UAAU,OAAOC,QAAQ,OAAQC,cAAc,SAAUC,IAAI,QAAQlC,SAC7E4B,EAAiBO,KAAI,SAAAnD,GACpB,OACEc,EAAAA,EAAAA,MAACsC,EAAAA,EAAI,CACHjC,GAAI,CAAEkC,SAAU,IAAKC,gBAAiB,WAAYtC,SAAA,EAGlDF,EAAAA,EAAAA,MAACyC,EAAAA,EAAW,CAAAvC,SAAA,EACVF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEC,aAAc,QAASJ,SAAA,CAAC,SAC9ChB,EAAQC,SAEjBa,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACG,QAAQ,QAAOL,SAAA,CAAC,WAAShB,EAAQS,cAE/CQ,EAAAA,EAAAA,KAACuC,EAAAA,EAAW,CAAAxC,UACVC,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CACLL,KAAK,QACLC,KAAK,SACLnB,GAAI,CAAEsC,WAAY,QAClBC,QAAS,kBAAM/C,GAASgD,EAAAA,EAAAA,IAAc3D,EAAQmC,IAAI,EAACnB,SACpD,eAdEhB,EAAQmC,GAoBnB,OA5BKlB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,sBA+BhB,E,UCtCa4C,EAAS,WACpB,IAAMjD,GAAWC,EAAAA,EAAAA,MACjB,OACEE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,GAAI,CAACC,aAAa,QAAQJ,SAAC,2BACvCC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,GAAG,iBACHC,MAAM,aACNf,QAAQ,WACRgB,KAAK,QACLC,KAAK,OACLrC,KAAK,OACLkB,GAAI,CAAE0C,MAAM,SACZC,SAAU,SAAAC,GAAG,OAAIpD,GAASqD,EAAAA,EAAAA,GAAYD,EAAIE,OAAOC,OAAO,MAKhE,E,oBCZe,SAASC,IACpB,IAAM1E,GAAYoB,EAAAA,EAAAA,IAAYvB,GACxBK,GAAQkB,EAAAA,EAAAA,IAAYnB,GACpBiB,GAAWC,EAAAA,EAAAA,MAIjB,OAHAwD,EAAAA,EAAAA,YAAU,WACNzD,GAAS0D,EAAAA,EAAAA,MACb,GAAG,CAAC1D,KAEFG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAACqD,EAAAA,EAAM,CAAAtD,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,qBAETC,EAAAA,EAAAA,KAACP,EAAW,KACZO,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,GAAI,CAAE4B,UAAU,OAAQ3B,aAAa,QAASC,QAAQ,KAAIL,SAAC,mBACvEC,EAAAA,EAAAA,KAAC2C,EAAM,IACNnE,GAAaE,GAAQsB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAAiBC,EAAAA,EAAAA,KAAC0B,EAAY,MAG/D,C","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { Form, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n  gap: 15px;\n`;\nexport const ErrMsg = styled(ErrorMessage)`\n  color: red;\n  border: 1px solid black;\n  padding: 5px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Field, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport * as Yup from 'yup';\nimport { FormWrap, ErrMsg } from './ContactForm.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, TextField, Typography } from '@mui/material';\n\nconst quizSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore Artagnan'\n    )\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  function addNewContact(values) {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return alert(`${values.name} is already in contacts.`);\n    }\n    return dispatch(addContact(values));\n  }\n  return (\n    <>\n      <Typography sx={{marginBottom: '15px'}} variant=\"h4\">Add Contact</Typography>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={quizSchema}\n        onSubmit={(values, actions) => {\n          addNewContact(values);\n          actions.resetForm();\n        }}\n      >\n        <FormWrap>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Name\"\n            variant=\"outlined\"\n            size=\"small\"\n            type=\"text\"\n            name=\"name\"\n          >\n            <Field\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Add contact name\"\n            />\n          </TextField>\n          <ErrMsg name=\"name\" component=\"div\" />\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Number\"\n            variant=\"outlined\"\n            size=\"small\"\n            type=\"text\"\n            name=\"name\"\n          >\n            <Field\n              id=\"number\"\n              name=\"number\"\n              type=\"text\"\n              placeholder=\"Example: 123-45-67\"\n            />\n          </TextField>\n          <ErrMsg name=\"number\" component=\"div\" />\n          <Button size=\"medium\" variant=\"contained\" type=\"submit\">\n            Add contact\n          </Button>\n        </FormWrap>\n      </Formik>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, Button, Card, CardActions, CardContent, Typography } from '@mui/material';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  if (!contacts.length || !contacts) {\n    return <div>PhoneBook is empty</div>;\n  }\n  return (\n    <Box sx={{ marginTop:'15px',display:'flex', flexDirection:'column', gap:'10px'}}>\n      {filteredContacts.map(contact => {\n        return (\n          <Card\n            sx={{ minWidth: 275, backgroundColor: '#e6ecff' }}\n            key={contact.id}\n          >\n            <CardContent>\n              <Typography variant=\"h5\" sx={{ marginBottom: '10px' }}>\n                Name: {contact.name}\n              </Typography>\n              <Typography variant=\"body2\">Number: {contact.number}</Typography>\n            </CardContent>\n            <CardActions>\n              <Button\n                size=\"small\"\n                type=\"button\"\n                sx={{ marginLeft: 'auto' }}\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                Delete\n              </Button>\n            </CardActions>\n          </Card>\n        );\n      })}\n    </Box>\n  );\n};\n","import { TextField, Typography } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { filterValue } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <div >\n      <Typography sx={{marginBottom:'10px'}}>Find contacts by name</Typography>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Enter name\"\n        variant=\"outlined\"\n        size=\"small\"\n        type=\"text\"\n        name=\"name\"\n        sx={{ width:'350px'}}\n        onChange={evt => dispatch(filterValue(evt.target.value))\n        }\n      />\n    </div>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactsList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts()  {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n      <div>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <ContactForm />\n        <Typography sx={{ marginTop:'25px', marginBottom:'15px'}} variant=\"h4\">Your Contacts</Typography>\n        <Filter />\n        {isLoading & !error ? <b>LOADING...</b> : <ContactsList />}\n      </div>\n    );\n}"],"names":["FormWrap","styled","Form","_templateObject","_taggedTemplateLiteral","ErrMsg","ErrorMessage","_templateObject2","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","quizSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsxs","_Fragment","children","_jsx","Typography","sx","marginBottom","variant","Formik","initialValues","validationSchema","onSubmit","values","actions","find","alert","concat","addContact","addNewContact","resetForm","TextField","id","label","size","type","Field","placeholder","component","Button","ContactsList","filteredContacts","length","Box","marginTop","display","flexDirection","gap","map","Card","minWidth","backgroundColor","CardContent","CardActions","marginLeft","onClick","deleteContact","Filter","width","onChange","evt","filterValue","target","value","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}