{"version":3,"file":"static/js/385.7ad1d904.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { Form, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n  gap: 15px;\n`;\nexport const ErrMsg = styled(ErrorMessage)`\n  color: red;\n  border: 1px solid black;\n  padding: 5px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport * as Yup from 'yup';\nimport { FormWrap } from './ContactForm.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, TextField, Typography } from '@mui/material';\n\nconst quizSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore Artagnan'\n    )\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  function addNewContact(values) {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return alert(`${values.name} is already in contacts.`);\n    }\n    return dispatch(addContact(values));\n  }\n  return (\n    <>\n      <Typography sx={{ marginBottom: '15px' }} variant=\"h4\">\n        Add Contact\n      </Typography>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={quizSchema}\n        onSubmit={(values, actions) => {\n          addNewContact(values);\n          actions.resetForm();\n        }}\n      >\n        {formik => (\n          <FormWrap>\n            <TextField\n              id=\"name\"\n              name=\"name\"\n              label=\"Name\"\n              size=\"small\"\n              type=\"text\"\n              placeholder=\"Add contact name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n            <TextField\n              id=\"number\"\n              name=\"number\"\n              label=\"Number\"\n              size=\"small\"\n              type=\"text\"\n              placeholder=\"Example: 123-45-67\"\n              value={formik.values.number}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.number && Boolean(formik.errors.number)}\n              helperText={formik.touched.number && formik.errors.number}\n            />\n            <Button size=\"medium\" variant=\"contained\" type=\"submit\">\n              Add contact\n            </Button>\n          </FormWrap>\n        )}\n      </Formik>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, Button, Card, CardActions, CardContent, Typography } from '@mui/material';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  if (!contacts.length || !contacts) {\n    return <div>PhoneBook is empty</div>;\n  }\n  return (\n    <Box sx={{ marginTop:'15px',display:'flex', flexDirection:'column', gap:'10px'}}>\n      {filteredContacts.map(contact => {\n        return (\n          <Card\n            sx={{ minWidth: 275, backgroundColor: '#e6ecff' }}\n            key={contact.id}\n          >\n            <CardContent>\n              <Typography variant=\"h5\" sx={{ marginBottom: '10px' }}>\n                Name: {contact.name}\n              </Typography>\n              <Typography variant=\"body2\">Number: {contact.number}</Typography>\n            </CardContent>\n            <CardActions>\n              <Button\n                size=\"small\"\n                type=\"button\"\n                sx={{ marginLeft: 'auto' }}\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                Delete\n              </Button>\n            </CardActions>\n          </Card>\n        );\n      })}\n    </Box>\n  );\n};\n","import { TextField, Typography } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { filterValue } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <div >\n      <Typography sx={{marginBottom:'10px'}}>Find contacts by name</Typography>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Enter name\"\n        variant=\"outlined\"\n        size=\"small\"\n        type=\"text\"\n        name=\"name\"\n        sx={{ width:'350px'}}\n        onChange={evt => dispatch(filterValue(evt.target.value))\n        }\n      />\n    </div>\n  );\n};\n","import { Typography } from \"@mui/material\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactsList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts()  {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n      <div>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <ContactForm />\n        <Typography sx={{ marginTop:'25px', marginBottom:'15px'}} variant=\"h4\">Your Contacts</Typography>\n        <Filter />\n        {isLoading & !error ? <b>LOADING...</b> : <ContactsList />}\n      </div>\n    );\n}"],"names":["FormWrap","styled","Form","_templateObject","_taggedTemplateLiteral","ErrorMessage","_templateObject2","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","quizSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsxs","_Fragment","children","_jsx","Typography","sx","marginBottom","variant","Formik","initialValues","validationSchema","onSubmit","values","actions","find","alert","concat","addContact","addNewContact","resetForm","formik","TextField","id","label","size","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","Button","ContactsList","filteredContacts","length","Box","marginTop","display","flexDirection","gap","map","Card","minWidth","backgroundColor","CardContent","CardActions","marginLeft","onClick","deleteContact","Filter","width","evt","filterValue","target","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}