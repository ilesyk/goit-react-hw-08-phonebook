{"version":3,"file":"static/js/820.f8b68f08.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { Form, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormWrap = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n  gap: 15px;\n`;\nexport const ErrMsg = styled(ErrorMessage)`\n  color: red;\n  border: 1px solid black;\n  padding: 5px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Field, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport * as Yup from 'yup';\nimport { FormWrap, ErrMsg } from './ContactForm.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst quizSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore Artagnan'\n    )\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  function addNewContact(values) {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return alert(`${values.name} is already in contacts.`);\n    }\n    return dispatch(addContact(values));\n  }\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={quizSchema}\n      onSubmit={(values, actions) => {\n        addNewContact(values);\n        actions.resetForm();\n      }}\n    >\n      <FormWrap>\n        <label htmlFor=\"Name\">Name</label>\n        <Field\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Add contact name\"\n        />\n        <ErrMsg name=\"name\" component=\"div\" />\n        <label htmlFor=\"number\">Number</label>\n        <Field\n          id=\"number\"\n          name=\"number\"\n          type=\"text\"\n          placeholder=\"Example: 123-45-67\"\n        />\n        <ErrMsg name=\"number\" component=\"div\" />\n        <button type=\"submit\">Add contact</button>\n      </FormWrap>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n  gap: 15px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  justify-content: space-between;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem } from './ContactList.styled';\nimport { selectContacts, selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  if (!contacts.length || !contacts) {\n    return <div>PhoneBook is empty</div>;\n  }\n  return (\n    <List>\n      {filteredContacts.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            <p>\n              {contact.name}: {contact.number}\n            </p>\n            <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { filterValue } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={evt => dispatch(filterValue(evt.target.value))}\n        placeholder=\"Topic filter\"\n      />\n    </div>\n  );\n};\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactsList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts()  {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n      <div>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading & !error ? <b>LOADING...</b> : <ContactsList />}\n      </div>\n    );\n}"],"names":["FormWrap","styled","Form","_templateObject","_taggedTemplateLiteral","ErrMsg","ErrorMessage","_templateObject2","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","quizSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","alert","concat","addContact","addNewContact","resetForm","children","_jsxs","htmlFor","Field","id","type","placeholder","component","List","ListItem","ContactsList","filteredContacts","length","map","onClick","deleteContact","Filter","onChange","evt","filterValue","target","value","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}